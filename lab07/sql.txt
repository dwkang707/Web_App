CREATE DATABASE colleage;
USE colleage;

DROP TABLE IF EXISTS student;
CREATE TABLE student (
    student_id INTEGER NOT NULL,
    name VARCHAR(10) NOT NULL,
    year INTEGER NOT NULL DEFAULT '1'
    dept_no INTEGER NOT NULL,
    major VARCHAR(20),
    PRIMARY KEY (student_id)
);

DROP TABLE IF EXISTS department;
CREATE TABLE department (
    dept_no INTEGER NOT NULL AUTO_INCREMENT PRIMARY KEY,
    dept_name VARCHAR(40) NOT NULL UNIQUE,
    office VARCHAR(40) NOT NULL,
    office_tel VARCHAR(40)
);

ALTER TABLE student
    MODIFY COLUMN major VARCHAR(30);

ALTER TABLE student
    ADD COLUMN gender VARCHAR(10);

ALTER TABLE student DROP COLUMN gender;

/* TABLE에 data를 INSERT하는 동안 수정을 못하게 잠금 */
LOCK TABLES student WRITE;
INSERT INTO student VALUES
(20070002, 'Jane Smith', 3, 4, 'Business Administration'),
(20060001, 'Ashley Jackson', 4, 4, 'Business Administration'),
(20030001, 'Liam Johnson', 4, 2, 'Electrical Engineering'),
(20040003, 'Jacob Lee', 3, 2, 'Electrical Engineering'),
(20060002, 'Noah Kim', 3, 1, 'Computer Science'),
(20100002, 'Ava Lim', 3, 4, 'Business Administration'),
(20110001, 'Emma Watson', 2, 1, 'Computer Science'),
(20080003, 'Lisa Maria', 4, 3, 'Law'),
(20040002, 'Jacob William', 4, 5, 'Law'),
(20070001, 'Emily Rose', 4, 4, 'Business Administration'),
(20100001, 'Ethan Hunt', 3, 4, 'Business Administration'),
(20110002, 'Jason Mraz', 2, 1, 'Electrical Engineering'),
(20030002, 'John Smith', 5, 1, 'Computer Science'),
(20070003, 'Sophia Park', 4, 3, 'Law'),
(20070007, 'James Michael', 2, 4, 'Business Administration'),
(20100003, 'James Bond', 3, 1, 'Computer Science'),
(20070005, 'Olivia Madison', 2, 5, 'English Language and Literature');
UNLOCK TABLES;

LOCK TABLES department WRITE;
INSERT INTO department (dept_name, office, office_tel) VALUES
('Computer Science', 'Science Building 101', '02-3290-0123');
INSERT INTO department (dept_name, office, office_tel) VALUES
('Electrical Engineering', 'Engineering Building 401', '02-3290-2345');
INSERT INTO department (dept_name, office, office_tel) VALUES
('Law', 'Law Building 201', '02-3290-7896');
INSERT INTO department (dept_name, office, office_tel) VALUES
('Business Administration', 'Business Building 104', '02-3290-1112');
INSERT INTO department (dept_name, office, office_tel) VALUES
('English Language and Literature', 'Language Building 303', '02-3290-4412');
UNLOCK TABLES;

UPDATE department
SET dept_name = 'Electrical and Electronics Engineering'
WHERE dept_name = 'Electrical Engineering';

UPDATE student
SET major = 'Electrical and Electronics Engineering'
WHERE major = 'Electrical Engineering';

INSERT INTO department (dept_name, office, office_tel) VALUES
('Special Education', 'Education Building 403', '02-3290-2347');

UPDATE student
SET major = 'Special Education'
WHERE name = 'Emma Watson';

DELETE FROM student
WHERE name = 'Jason Mraz';

DELETE FROM student
WHERE name = 'John Smith';

SELECT * FROM student WHERE major = 'Computer Science';
SELECT student_id, year, major FROM student;
SELECT * FROM student WHERE year = 3;
SELECT * FROM student WHERE year = 1 OR year = 2;
SELECT * FROM student s JOIN department d ON s.dept_no = d.dept_no WHERE dept_name = 'Business Administration';

SELECT * FROM student WHERE student_id LIKE '2007%';
SELECT * FROM student ORDER BY student_id;
SELECT * FROM student GROUP BY major HAVING AVG(year) > 3;
SELECT name, year, count(year) FROM student GROUP BY major HAVING AVG(year) > 3;
SELECT * FROM student WHERE major = 'Business Administration' AND student_id LIKE '2007%' LIMIT 2;

SELECT role FROM roles r JOIN movies m ON r.movie_id = m.id WHERE m.name = "Pi";
SELECT first_name, last_name, role FROM actors a JOIN roles r ON r.actor_id = a.id JOIN movies m ON m.id = r.movie_id WHERE m.name = 'Pi';
SELECT DISTINCT first_name, last_name FROM actors a JOIN roles r ON r.actor_id = a.id JOIN movies m ON m.id = r.movie_id WHERE m.name = 'Kill Bill: Vol. 1' AND m.name = 'Kill Bill: Vol. 2';
SELECT first_name, last_name FROM actors a JOIN roles r ON a.id = r.actor_id JOIN movies m ON m.id = r.movie_id GROUP BY a.id ORDER BY count(a.id) DESC LIMIT 7;
SELECT genre FROM movies_genres mg JOIN movies m ON m.id = mg.movie_id GROUP BY genre ORDER BY count(genre) DESC LIMIT 3;
SELECT first_name, last_name FROM directors d JOIN movies_directors md ON md.director_id = d.id; JOIN directors_genres dg ON dg.director_id = d.id;

SELECT grade FROM grades g JOIN courses c ON c.id = g.course_id WHERE c.name = 'Computer Science 143';
SELECT s.name FROM students s JOIN grades g ON s.id = g.student_id JOIN courses c ON c.id = g.course_id WHERE c.name = 'Computer Science 143' AND g.grade < 'B-';
SELECT c.name, count(g.course_id) FROM courses c JOIN grades g ON g.course_id = c.id GROUP BY g.course_id HAVING count(g.course_id) >= 2;